# Makefile for config_update utility

V ?= 0

ifeq ($V, 0)
    E = @
    P = @echo 
else
    E = 
    P = @true
endif

ETK_DIR ?= $(shell cat ./../../../support_files/ETKpath.txt)
TOOLCHAIN_DIR	= $(ETK_DIR)/arm-toolchain
export PATH	:= $(TOOLCHAIN_DIR)/bin/:$(PATH)
CROSS_COMPILE	?= arm-none-linux-gnueabihf-

BUILD_DIR = ./build
OBJ_DIR = $(BUILD_DIR)/objs
PNPBRIDGE_DIR = ./../../../../../../..
IMPINJ_READER_R700_DIR = ./../../..
C_UTILITY = $(PNPBRIDGE_DIR)/deps/azure-iot-sdk-c-pnp/c-utility
CURL_WRAPPER_DIR = $(IMPINJ_READER_R700_DIR)/curl_wrapper
CURL_WRAPPER = $(CURL_WRAPPER_DIR)/curl_wrapper.c
CURL_WRAPPER_O_ARM = $(OBJ_DIR)/curl_wrapper_arm.o
CURL_WRAPPER_O_X64 = $(OBJ_DIR)/curl_wrapper_x64.o
XLOGGING = $(C_UTILITY)/src/xlogging.c
XLOGGING_O_ARM = $(OBJ_DIR)/xlogging_arm.o
XLOGGING_O_X64 = $(OBJ_DIR)/xlogging_x64.o
CRT_ABSTRACTIONS = $(C_UTILITY)/src/crt_abstractions.c
CRT_ABSTRACTIONS_O_ARM = $(OBJ_DIR)/crt_abstractions_arm.o
CRT_ABSTRACTIONS_O_X64 = $(OBJ_DIR)/crt_abstractions_x64.o
CONSOLELOGGER = $(C_UTILITY)/src/consolelogger.c
CONSOLELOGGER_O_ARM = $(OBJ_DIR)/consolelogger_arm.o
CONSOLELOGGER_O_X64 = $(OBJ_DIR)/consolelogger_x64.o
MACRO_UTILS_INC = $(C_UTILITY)/deps/azure-macro-utils-c/inc
UMOCK_INC = $(C_UTILITY)/deps/umock-c/inc
PARSON_DIR = $(PNPBRIDGE_DIR)/deps/azure-iot-sdk-c-pnp/deps/parson
PARSON = $(PARSON_DIR)/parson.c
PARSON_O_ARM = $(OBJ_DIR)/parson_arm.o
PARSON_O_X64 = $(OBJ_DIR)/parson_x64.o
CONFIG_UPDATE = config_update.cpp
CONFIG_UPDATE_ARM = $(BUILD_DIR)/config_update-arm
CONFIG_UPDATE_O_ARM = $(BUILD_DIR)/config_update-arm.o
CONFIG_UPDATE_X64 = $(BUILD_DIR)/config_update-x64
CONFIG_UPDATE_O_X64 = $(OBJ_DIR)/config_update-x64.o

C_UTILITY_INCLUDES = -I$(C_UTILITY)/inc/ -I$(MACRO_UTILS_INC) -I$(UMOCK_INC)
CURL_WRAPPER_INCLUDES = $(C_UTILITY_INCLUDES) -I$(CURL_WRAPPER_DIR)/curlwrapper.h -lcurl -lpthread

CPP	:= g++
CC	:= gcc
CPP_ARM	:= $(CROSS_COMPILE)$(CPP)
CC_ARM	:= $(CROSS_COMPILE)$(CC)
INCDIR	= -I$(TOOLCHAIN_DIR)/arm-buildroot-linux-gnueabihf/sysroot/usr/include/

all: $(CONFIG_UPDATE_X64) $(CONFIG_UPDATE_ARM)
	$P '  Builds completed successfully!'

# ARM BUILDS

$(CONFIG_UPDATE_ARM): $(CONFIG_UPDATE_O_ARM) $(PARSON_O_ARM) $(CURL_WRAPPER_O_ARM) $(PARSON_O_ARM) $(CRT_ABSTRACTIONS_O_ARM) $(CONSOLELOGGER_O_ARM) 
	$P '  Building $(CONFIG_UPDATE_ARM)'
	$E $(CPP_ARM) -g $(CONFIG_UPDATE) -o $(CONFIG_UPDATE_ARM) $(PARSON_O_ARM) $(CURL_WRAPPER_O_ARM) $(CRT_ABSTRACTIONS_O_ARM) $(CONSOLELOGGER_O_ARM) $(XLOGGING_O_ARM) $(CURL_WRAPPER_INCLUDES) $(INCDIR)

$(CONFIG_UPDATE_O_ARM): $(CURL_WRAPPER_O_ARM)
	$P '  Building $(CONFIG_UPDATE_O_ARM)'
	$E $(CPP_ARM) -g $(CONFIG_UPDATE) -c -o $(CONFIG_UPDATE_ARM) $(CURL_WRAPPER_INCLUDES) $(INCDIR)

$(CURL_WRAPPER_O_ARM): $(CRT_ABSTRACTIONS_O_ARM) $(XLOGGING_O_ARM) $(CONSOLELOGGER_O_ARM)
	$P '  Building $(CURL_WRAPPER_O_ARM)'
	$E $(CC_ARM) -g $(CURL_WRAPPER) -c -o $(CURL_WRAPPER_O_ARM) $(CURL_WRAPPER_INCLUDES)

$(CRT_ABSTRACTIONS_O_ARM): $(OBJ_DIR)
	$P '  Building $(CRT_ABSTRACTIONS_O_ARM)'
	$E $(CC_ARM) -g $(CRT_ABSTRACTIONS) -c -o $(CRT_ABSTRACTIONS_O_ARM) $(C_UTILITY_INCLUDES)

$(CONSOLELOGGER_O_ARM): $(OBJ_DIR) 
	$P '  Building $(CONSOLELOGGER_O_ARM)'
	$E $(CC_ARM) -g $(CONSOLELOGGER) -c -o $(CONSOLELOGGER_O_ARM) $(C_UTILITY_INCLUDES)

$(XLOGGING_O_ARM): $(OBJ_DIR) 
	$P '  Building $(XLOGGING_O_ARM)'
	$E $(CC_ARM) -g $(XLOGGING) -c -o $(XLOGGING_O_ARM) $(C_UTILITY_INCLUDES)

$(PARSON_O_ARM): $(OBJ_DIR)
	$P '  Building $(PARSON_O_ARM)'
	$E $(CC_ARM) -g $(PARSON) -c -o $(PARSON_O_ARM)

# X64 BUILDS

$(CONFIG_UPDATE_X64): $(CONFIG_UPDATE_O_X64) $(PARSON_O_X64) $(CURL_WRAPPER_O_X64) $(PARSON_O_X64) $(CRT_ABSTRACTIONS_O_X64) $(CONSOLELOGGER_O_X64) 
	$P '  Building $(CONFIG_UPDATE_X64)'
	$E $(CPP) -g $(CONFIG_UPDATE) -o $(CONFIG_UPDATE_X64) $(PARSON_O_X64) $(CURL_WRAPPER_O_X64) $(CRT_ABSTRACTIONS_O_X64) $(CONSOLELOGGER_O_X64) $(XLOGGING_O_X64) $(CURL_WRAPPER_INCLUDES)

$(CONFIG_UPDATE_O_X64): $(CURL_WRAPPER_O_X64)
	$P '  Building $(CONFIG_UPDATE_O_X64)'
	$E $(CPP) -g $(CONFIG_UPDATE) -c -o $(CONFIG_UPDATE_X64) $(CURL_WRAPPER_INCLUDES)

$(CURL_WRAPPER_O_X64): $(CRT_ABSTRACTIONS_O_X64) $(XLOGGING_O_X64) $(CONSOLELOGGER_O_X64)
	$P '  Building $(CURL_WRAPPER_O_X64)'
	$E $(CC) -g $(CURL_WRAPPER) -c -o $(CURL_WRAPPER_O_X64) $(CURL_WRAPPER_INCLUDES)

$(CRT_ABSTRACTIONS_O_X64): $(OBJ_DIR)
	$P '  Building $(CRT_ABSTRACTIONS_O_X64)'
	$E $(CC) -g $(CRT_ABSTRACTIONS) -c -o $(CRT_ABSTRACTIONS_O_X64) $(C_UTILITY_INCLUDES)

$(CONSOLELOGGER_O_X64): $(OBJ_DIR) 
	$P '  Building $(CONSOLELOGGER_O_X64)'
	$E $(CC) -g $(CONSOLELOGGER) -c -o $(CONSOLELOGGER_O_X64) $(C_UTILITY_INCLUDES)

$(XLOGGING_O_X64): $(OBJ_DIR) 
	$P '  Building $(XLOGGING_O_X64)'
	$E $(CC) -g $(XLOGGING) -c -o $(XLOGGING_O_X64) $(C_UTILITY_INCLUDES)

$(PARSON_O_X64): $(OBJ_DIR)
	$P '  Building $(PARSON_O_X64)'
	$E $(CC) -g $(PARSON) -c -o $(PARSON_O_X64)

$(BUILD_DIR) $(OBJ_DIR):
	$P '  Building $(BUILD_DIR) & $(OBJ_DIR)'
	$E mkdir -p $@

.PHONY: clean
clean:
	$P '  RM		BUILD_DIR'
	$E rm -rf $(BUILD_DIR)
